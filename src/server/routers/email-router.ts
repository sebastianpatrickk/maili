import { Hono } from "hono";
import { zValidator } from "@hono/zod-validator";
import db from "@/server/db";
import { emails } from "@/server/db/schema";
import { desc, eq } from "drizzle-orm";
import { emailInsertFormSchema } from "@/lib/validations/email";
import { HTTPException } from "hono/http-exception";
import { z } from "zod";

const router = new Hono()
  .get("/", async (c) => {
    const data = await db.select().from(emails).orderBy(desc(emails.createdAt));
    return c.json({ data });
  })
  .get(
    "/:publicId",
    zValidator("param", z.object({ publicId: z.string().optional() })),
    async (c) => {
      const { publicId } = c.req.valid("param");

      if (!publicId) {
        throw new HTTPException(400, {
          message: "Invalid id",
        });
      }

      const email = await db
        .select()
        .from(emails)
        .where(eq(emails.publicId, publicId))
        .limit(1);

      if (!email.length) {
        throw new HTTPException(404, { message: "Email not found" });
      }

      return c.json({ data: email[0] });
    }
  )
  .post("/create", zValidator("json", emailInsertFormSchema), async (c) => {
    const data = c.req.valid("json");

    const [email] = await db
      .insert(emails)
      // TODO: Add title generation by message with AI
      .values({ ...data, title: "Generated by AI! (trust me bro)" })
      .returning({ publicId: emails.publicId });

    return c.json({ data: email });
  });

export default router;
